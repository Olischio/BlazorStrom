@page "/turbine/{id}/{capacityusage:double}/{turbinename}"
@using System.ComponentModel.DataAnnotations
@using Blazorise
@inject HttpClient Http
@inject NavigationManager NavManager


<h3>Change Turbine Settings For @turbinename</h3>



<EditForm Model="@exampleModel" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <Blazorise.ValidationSummary />

    <Field>
        <InputNumber id="name" @bind-Value="exampleModel.CapacityUsage" />
    </Field>

    <Paragraph>
        Current value: @exampleModel.CapacityUsage
    </Paragraph>
    <Field>
        <Slider @bind-Value="@exampleModel.CapacityUsage" Min="0" Max="100" />
    </Field>
    

    <button class="btn btn-primary" type="submit">Submit</button>
</EditForm>




@code {
        [Parameter]
        public string? Id { get; set; }

        [Parameter]
        public string? turbinename { get; set; }

        [Parameter]
        public double CapacityUsage { get; set; }

    public EditTurbineModel exampleModel { get; set; } = new EditTurbineModel();


    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        exampleModel = new EditTurbineModel();
        exampleModel.Id = Id;
        exampleModel.CapacityUsage = CapacityUsage * 100;

    }

    private async Task  HandleValidSubmit()
    {

        double CapacityUsageAsPercentage = this.exampleModel.CapacityUsage / 100;

        var response = await this.Http.PutAsync($"/api/Turbines/{this.exampleModel.Id}?capacityUsage={CapacityUsageAsPercentage}",null);
        response.EnsureSuccessStatusCode();
        NavManager.NavigateTo("/turbines");


    }

    public class EditTurbineModel
    {
        public string? Id { get; set; }

    


        [Range(0, 100, ErrorMessage = "Value for {0} must be between {1} and {2}.")]
        public double CapacityUsage { get; set; }
    }
}
